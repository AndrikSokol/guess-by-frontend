openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getUser
      summary: get current user
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - user
  /auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterAuthDto"
      responses:
        "200":
          description: user was created
      tags:
        - auth
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginAuthDto"
      responses:
        "200":
          description: successful login
        "401":
          description: unathorized
        "404":
          description: user not found
      tags:
        - auth
  /auth/logout:
    get:
      operationId: AuthController_logout
      parameters: []
      responses:
        "200":
          description: logout from system
        "401":
          description: unathorized
      tags:
        - auth
      security:
        - access_token: []
  /auth/google/login:
    get:
      operationId: AuthController_googleAuth
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - auth
  /auth/google/callback:
    get:
      operationId: AuthController_googleAuthRedirect
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - auth
  /profile:
    get:
      operationId: ProfileController_getProfile
      summary: get user profile
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - profile
      security:
        - access_token: []
    post:
      operationId: ProfileController_create
      summary: create user profile
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - profile
      security:
        - access_token: []
    patch:
      operationId: ProfileController_update
      summary: patch user profile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileDto"
      responses:
        "200":
          description: ""
      tags:
        - profile
      security:
        - access_token: []
    delete:
      operationId: ProfileController_delete
      summary: delete user profile
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - profile
      security:
        - access_token: []
  /file/upload:
    post:
      operationId: FileController_uploadFile
      summary: upload from storage
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileDto"
      responses:
        "201":
          description: ""
      tags:
        - file
      security:
        - access_token: []
  /file/upload-by-link:
    post:
      operationId: FileController_uploadByLinkFile
      summary: upload by link
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UploadByUrlDto"
      responses:
        "201":
          description: ""
      tags:
        - file
      security:
        - access_token: []
  /log:
    get:
      operationId: LogController_getLogs
      summary: get all logs
      parameters:
        - name: context
          required: true
          in: query
          example: SQL
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - log
      security:
        - access_token: []
  /room:
    get:
      operationId: RoomController_getRooms
      summary: get active rooms
      parameters:
        - name: order
          required: false
          in: query
          schema:
            default: ASC
            enum:
              - ASC
              - DESC
            type: string
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 50
            default: 10
            type: number
      responses:
        "200":
          description: ""
      tags:
        - room
      security:
        - access_token: []
    post:
      operationId: RoomController_create
      summary: create a room
      parameters:
        - name: level
          required: true
          in: query
          schema:
            default: easy
            enum:
              - easy
              - medium
              - hard
            type: string
      responses:
        "201":
          description: ""
      tags:
        - room
      security:
        - access_token: []
  /room/{link}:
    get:
      operationId: RoomController_getRoom
      summary: get room by link
      parameters:
        - name: link
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - room
      security:
        - access_token: []
  /room/{id}:
    delete:
      operationId: RoomController_delete
      summary: delete room by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - room
      security:
        - access_token: []
info:
  title: Final project
  description: API description
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    RegisterAuthDto:
      type: object
      properties:
        firstName:
          type: string
          example: Andrei
        lastName:
          type: string
          example: Sakalouski
        email:
          type: string
          example: AndrikSokol31@gmail.com
        username:
          type: string
          example: Andrik
        password:
          type: string
          example: 123
      required:
        - firstName
        - lastName
        - email
        - username
        - password
    LoginAuthDto:
      type: object
      properties:
        email:
          type: string
          example: AndrikSokol31@gmail.com
        password:
          type: string
          example: 123
      required:
        - email
        - password
    UpdateProfileDto:
      type: object
      properties:
        firstName:
          type: string
          example: Andrik
        lastName:
          type: string
          example: Sokol
        birthdate:
          format: YYYY-MM-DD
          type: string
          example: "1995-12-17"
        avatar:
          type: string
          example: 2024-04-29/9440461-a1871b07-b989-4acf-a1cc-504894bd3746.jpg
      required:
        - firstName
        - lastName
        - birthdate
        - avatar
    FileDto:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    UploadByUrlDto:
      type: object
      properties:
        url:
          type: string
          example: >-
            https://images.radiox.co.uk/images/46391?crop=16_9&width=660&relax=1&format=webp&signature=qSH69AcydTnP-7x2bUa7fgD5edU=
      required:
        - url
